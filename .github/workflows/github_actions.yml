name: Challenge CI/CD Pipeline

#on:
#  pull_request:
#    branches:
#      - dev
#      - main
on:
  push:
    branches:
      - feat/6

jobs:
  build-and-deploy: # Job 이름
    runs-on: ubuntu-latest # 실행 환경 - 가장 최신 버전 Ubuntu 환경

    steps:
      # 1. GitHub Repository 파일 불러오기
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Docker 확장 기능 추가
      - name: Docker 확장 기능 추가
        uses: docker/setup-buildx-action@v3

      # 4. Docker Hub 로그인
      - name: Docker Hub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 5. Docker 이미지 생성 및 Push
      - name: Docker 이미지 생성 및 push
        uses: docker/build-push-action@v6
        with:
          context: . # Dockerfile 위치
          file: ./Dockerfile # Dockerfile 경로
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/challenge:${{ github.sha }} # 이미지 태그
          platforms: linux/amd64

      ## CD (Continuous Deployment) 파트
      # 6. EC2에 SSH로 접속하여 Docker 컨테이너 실행
      - name: EC2에 배포
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 퍼블릭 IP
          username: ubuntu # EC2 사용자 (기본은 ubuntu)
          key: ${{ secrets.EC2_SSH_KEY }} # EC2 SSH Private Key
          script_stop: true # SSH 명령어 실행 중 에러가 발생하면 워크플로 중단
          script: |
            docker rm -f challenge

            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/challenge:${{ github.sha }}

            docker run -d -p 8080:8080 --name challenge ${{ secrets.DOCKERHUB_USERNAME }}/challenge:${{ github.sha }}


